Directory structure:
└── demo-repo/
    ├── Dockerfile
    ├── requirements.txt
    ├── .dockerignore
    ├── app/
    │   ├── __init__.py
    │   └── main.py
    └── .github/
        └── workflows/
            └── ci.yml

================================================
FILE: Dockerfile
================================================
FROM python:3.11-slim

WORKDIR /app

# Install system deps commonly needed (kept minimal on purpose)
RUN apt-get update && apt-get install -y --no-install-recommends build-essential && rm -rf /var/lib/apt/lists/*

# Copy requirements (initially empty) and install
COPY requirements.txt .
# The self-healing patcher will harden this to --no-cache-dir automatically
RUN pip install -r requirements.txt

# Copy minimal app
COPY app ./app

# Intentionally fail the build until self-heal appends "uvicorn" to requirements.txt
# This line triggers: ModuleNotFoundError: No module named 'uvicorn'
RUN python -c "import uvicorn"

# Runtime (the app itself doesn't require uvicorn to run; this keeps the demo simple)
CMD ["python", "-m", "app.main"]



================================================
FILE: requirements.txt
================================================
# Intentionally left empty so the build fails on the "import uvicorn" sanity check.



================================================
FILE: .dockerignore
================================================
.git
__pycache__/
*.pyc



================================================
FILE: app/__init__.py
================================================



================================================
FILE: app/main.py
================================================
import sys


def main():
    print("Demo app is alive. Python:", sys.version)


if __name__ == "__main__":
    main()



================================================
FILE: .github/workflows/ci.yml
================================================
name: ci

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag (defaults to commit SHA)"
        required: false
      push_image:
        description: "Push image to registry?"
        type: boolean
        default: false
  pull_request:
  push:
    branches: ["main"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io
  DOCKERFILE: Dockerfile

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set tag
        id: meta
        run: |
          TAG="${{ inputs.image_tag || '' }}"
          if [ -z "$TAG" ]; then TAG="${GITHUB_SHA::7}"; fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (optional)
        if: inputs.push_image == true || github.event_name != 'workflow_dispatch'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build image; if push_image=false, this stays local (still exercises Dockerfile)
      - name: Build (and optionally push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          platforms: linux/amd64
          push: ${{ inputs.push_image == true }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}

      # Optional quick Trivy scan of the Docker context (no image push required)
      - name: Trivy scan (filesystem)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: "fs"
          hide-progress: true
          format: "table"
          exit-code: "0"
          ignore-unfixed: true
          severity: "HIGH,CRITICAL"
          scan-ref: "."

      # Optional: if image was pushed, do an image scan too
      - name: Trivy scan (image)
        if: inputs.push_image == true
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
          format: "table"
          exit-code: "0"
          ignore-unfixed: true
          severity: "HIGH,CRITICAL"
          vuln-type: "os,library"


