name: ci

on:
  workflow_dispatch:
    inputs:
      push_image:
        description: "Push built image to registry"
        type: boolean
        default: true
      dest_registry:
        description: "Destination registry (e.g. docker.io)"
        required: false
      dest_namespace:
        description: "Destination namespace/user (e.g. 909132asd)"
        required: false
      dest_repo:
        description: "Destination repo name (e.g. demo-repo)"
        required: false
      dest_tag:
        description: "Destination tag (e.g. auto)"
        required: false
  pull_request:
  push:
    branches: ["main"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKERFILE: Dockerfile

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve destination image
        id: dest
        run: |
          # Defaults (safe fallbacks)
          DEST_REGISTRY="${{ inputs.dest_registry || 'docker.io' }}"
          DEST_NS="${{ inputs.dest_namespace || github.repository_owner }}"
          DEST_REPO="${{ inputs.dest_repo || github.event.repository.name }}"
          DEST_TAG="${{ inputs.dest_tag || 'auto' }}"
          echo "image=${DEST_REGISTRY}/${DEST_NS}/${DEST_REPO}:${DEST_TAG}" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (if pushing)
        if: inputs.push_image == true
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.dest.outputs.image && 'docker.io' || 'docker.io' }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build (and optionally push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          platforms: linux/amd64
          push: ${{ inputs.push_image == true }}
          tags: ${{ steps.dest.outputs.image }}

      # Lightweight filesystem scan (optional)
      - name: Trivy scan (fs)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: "fs"
          hide-progress: true
          format: "table"
          exit-code: "0"
          ignore-unfixed: true
          severity: "HIGH,CRITICAL"
          scan-ref: "."

      # Optional: image scan (only when pushing)
      - name: Trivy scan (image)
        if: inputs.push_image == true
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ steps.dest.outputs.image }}
          format: "table"
          exit-code: "0"
          ignore-unfixed: true
          severity: "HIGH,CRITICAL"
          vuln-type: "os,library"
